// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String       @id // Discord User ID
  tag          String?
  shiftMembers ShiftMember[]
}

model Shift {
  id       String       @id @default(cuid())
  guildId  String
  name     String
  location String?
  startAt  DateTime
  endAt    DateTime
  timezone String
  members  ShiftMember[]

  @@index([guildId])
}

model ShiftMember {
  id      String @id @default(cuid())
  shiftId String
  userId  String
  role    String?
  notes   String?
  shift   Shift @relation(fields: [shiftId], references: [id])
  user    User  @relation(fields: [userId], references: [id])

  @@unique([shiftId, userId])
}

model InventoryItem {
  id          String @id @default(cuid())
  guildId     String
  name        String
  description String?
  quantity    Int
  checkouts   Json   @default("[]")

  @@unique([guildId, name])
}

model Kudos {
  id         String   @id @default(cuid())
  guildId    String
  fromUserId String
  toUserId   String
  message    String
  createdAt  DateTime @default(now())
}

enum LostItemStatus {
  IN_STORAGE // 保管中
  RETURNED   // 返却済
}

model LostItem {
  id            String        @id @default(cuid())
  guildId       String
  itemName      String
  foundLocation String
  imageUrl      String?
  reportedById  String
  status        LostItemStatus @default(IN_STORAGE)
  createdAt     DateTime       @default(now())
}

model Knowledge {
  id        String   @id @default(cuid())
  guildId   String
  keyword   String
  content   String
  createdAt DateTime @default(now())

  @@unique([guildId, keyword])
}

model CongestionReport {
  id         String   @id @default(cuid())
  guildId    String
  location   String
  level      Int      // e.g., 1 for low, 2 for medium, 3 for high
  reporterId String
  createdAt  DateTime @default(now())

  @@index([guildId, location, createdAt])
}

model Template {
  id        String   @id @default(cuid())
  name      String   @unique
  content   Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BuildRun {
  id           String   @id @default(cuid())
  guildId      String
  templateName String
  dryRunResult Json
  snapshot     Json
  status       String // PENDING, SUCCESS, FAILED, ROLLED_BACK
  executedBy   String
  createdAt    DateTime @default(now())
}

model Segment {
  id          String   @id @default(cuid())
  guildId     String
  name        String
  description String?
  conditions  Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([guildId, name])
  @@index([guildId])
}

// 新しく追加
model GuildConfig {
  id                String    @id @default(cuid())
  guildId           String    @unique // DiscordサーバーのID

  // ユーザーが設定する項目
  reminderChannelId String?   // ? をつけて、設定がなくても良い項目にする
  festivalStartDate DateTime?

  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}
